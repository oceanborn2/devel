<?xml version="1.0" encoding="UTF-8"?>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="InteractiveScenario" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testStep type="request" name="Requete_PDF"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EngineServicePortBinding</con:interface><con:operation>ews.client.Compose</con:operation><con:request name="Requete_PDF"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/ews.client.EngineService/ews.client.EngineService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eng="urn:hpexstream-services/Engine">
   <soapenv:ews.client.Header/>
   <soapenv:Body>
      <eng:ews.client.Compose>
         <!--Optional:-->
         <EWSComposeRequest>
            <!--Optional:-->
            <driver>
               <!--Optional:-->
               <driver>PEN1c3RvbWVyPg0KPERvYz5IZWxsb1dvcmxkPC9Eb2M+DQo8L0N1c3RvbWVyPg==</driver>
               <!--Optional:-->
               <fileName>INPUT</fileName>
            </driver>
            <!--Zero or more repetitions:-->
            <engineOptions>
               <!--Optional:-->
               <name>TRACKIN</name>
               <!--Optional:-->
               <value>DISABLE</value>
            </engineOptions>
            <!--Optional:-->
            <includeHeader>true</includeHeader>
            <includeMessageFile>true</includeMessageFile>
            <!--Optional:-->
            <pubFile>HelloWorld_PDF.pub</pubFile>
         </EWSComposeRequest>
      </eng:ews.client.Compose>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Requete_DLF"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EngineServicePortBinding</con:interface><con:operation>ews.client.Compose</con:operation><con:request name="Requete_DLF"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/ews.client.EngineService/ews.client.EngineService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eng="urn:hpexstream-services/Engine">
   <soapenv:ews.client.Header/>
   <soapenv:Body>
      <eng:ews.client.Compose>
         <!--Optional:-->
         <EWSComposeRequest>
            <!--Optional:-->
            <driver>
               <!--Optional:-->
               <driver>PEN1c3RvbWVyPg0KPERvYz5IZWxsb1dvcmxkPC9Eb2M+DQo8L0N1c3RvbWVyPg==</driver>
               <!--Optional:-->
               <fileName>INPUT</fileName>
            </driver>
            <!--Zero or more repetitions:-->
            <engineOptions>
               <!--Optional:-->
               <name>TRACKIN</name>
               <!--Optional:-->
               <value>DISABLE</value>
            </engineOptions>
            <!--Optional:-->
            <includeHeader>true</includeHeader>
            <includeMessageFile>true</includeMessageFile>
            <!--Optional:-->
            <pubFile>HelloWorld_DLF.pub</pubFile>
         </EWSComposeRequest>
      </eng:ews.client.Compose>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Scenario"><con:settings/><con:config><script>// 1st step: Run the SOAP request against the EWS web service and retrieve the base64 encoded response
// Either continue or stop based on error status
def step1RequestDLF() {
	// grab the testcase and run it
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);  
	def stepBase = testRunner.testCase.testSteps["Requete_DLF"]; 
	stepBase.run(testRunner, context)

	// retrieve the returning XML stream
	def xmlResult = stepBase.testRequest.response.getContentAsXml(); 
	log.info(xmlResult)
	
	// get a holder object to deal with XPATH 
	def responseHolder = groovyUtils.getXmlHolder(xmlResult)

	response = responseHolder.getNodeValues("//fileOutput/text()")
	log.info("response size : " + response[0].size())
	//log.info("response content : " + response[0])
	response[0]
}


// decode from base64 and store into a template.dlf file
def step2DecodeAndStoreDLF(String text) {
	log.info(text)
	byte[] response = base64toString(text).bytes 
	
	File f = new File("template.dlf")
	if (f.exists()) {
		f.delete()
	}

//	def b = f.newOutputStream() // will autoclose automatically (Closeable)
//	b.write(response)
	f.setBytes(response)		 
	//f.flush()
}


// *************************************************************
// Scenario entry point
def response = step1RequestDLF()
step2DecodeAndStoreDLF(response)
'COMPLETED OK'



// *************************************************************
// utility functions
//

// decode a base64 string to a stream of bytes
def base64toBytes (String s) {
	if (s.size()==0 || s.trim().size() == 0) { '' } 
	byte[] decBytes = s.decodeBase64()
}

// decode a base64 string to a cleartext string
def base64toString (String s) {
	new String(base64toBytes(s))
}

// split a string and return an array of string
// splitting is done based on the sep character sequence
def getStringAsArray(String fullText,sep="\r\n") {
	def lines = []
	fullText.split(sep).each { String it -> lines.add(it) }  
	lines
}


// run the live editor
def runLiveEditor() {
	def LEPath = 'C:/Program Files (x86)/Hewlett-Packard/HP Exstream/LiveEditor 4.0.104/Live.exe'
	def command = "${LEPath} "      // Create the String
	def proc = command.execute()    // Call *execute* on the string
	proc.waitFor()                  // Wait for the command to finish
}</script></con:config></con:testStep><con:properties/></con:testCase>