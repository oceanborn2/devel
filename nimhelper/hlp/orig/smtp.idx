Smtp	smtp.html#Smtp	smtp : Smtp	
Message	smtp.html#Message	smtp : Message	
ReplyError	smtp.html#ReplyError	smtp : ReplyError	
AsyncSmtp	smtp.html#AsyncSmtp	smtp : AsyncSmtp	
connect	smtp.html#connect,string	smtp : connect(address: string; port = Port(25); ssl = false; debug = false;\n        sslContext = defaultSSLContext): Smtp	
auth	smtp.html#auth,Smtp,string,string	smtp : auth(smtp: var Smtp; username, password: string)	
sendmail	smtp.html#sendmail,Smtp,string,seq[string],string	smtp : sendmail(smtp: var Smtp; fromaddr: string; toaddrs: seq[string]; msg: string)	
close	smtp.html#close,Smtp	smtp : close(smtp: Smtp)	
createMessage	smtp.html#createMessage,string,string,seq[string],seq[string],openArray[tuple[string,string]]	smtp : createMessage(mSubject, mBody: string; mTo, mCc: seq[string];\n              otherHeaders: openArray[tuple[name, value: string]]): Message	
createMessage	smtp.html#createMessage,string,string,seq[string],seq[string]	smtp : createMessage(mSubject, mBody: string; mTo, mCc: seq[string] = @ []): Message	
`$`	smtp.html#$,Message	smtp : `$`(msg: Message): string	
newAsyncSmtp	smtp.html#newAsyncSmtp,string,Port	smtp : newAsyncSmtp(address: string; port: Port; useSsl = false;\n             sslContext = defaultSslContext): AsyncSmtp	
connect	smtp.html#connect,AsyncSmtp	smtp : connect(smtp: AsyncSmtp): Future[void]	
auth	smtp.html#auth,AsyncSmtp,string,string	smtp : auth(smtp: AsyncSmtp; username, password: string): Future[void]	
sendMail	smtp.html#sendMail,AsyncSmtp,string,seq[string],string	smtp : sendMail(smtp: AsyncSmtp; fromAddr: string; toAddrs: seq[string]; msg: string): Future[\n    void]	
close	smtp.html#close,AsyncSmtp	smtp : close(smtp: AsyncSmtp): Future[void]	
