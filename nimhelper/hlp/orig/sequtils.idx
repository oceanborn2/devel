seq	sequtils.html#seq_1	Module sequtils	
concat	sequtils.html#concat,varargs[seq[T]]	sequtils : concat[T](seqs: varargs[seq[T]]): seq[T]	
cycle	sequtils.html#cycle,seq[T],Natural	sequtils : cycle[T](s: seq[T]; n: Natural): seq[T]	
repeat	sequtils.html#repeat,T,Natural	sequtils : repeat[T](x: T; n: Natural): seq[T]	
deduplicate	sequtils.html#deduplicate,seq[T]	sequtils : deduplicate[T](seq1: seq[T]): seq[T]	
zip	sequtils.html#zip,seq[S],seq[T]	sequtils : zip[S, T](seq1: seq[S]; seq2: seq[T]): seq[tuple[a: S, b: T]]	
distribute	sequtils.html#distribute,seq[T],Positive	sequtils : distribute[T](s: seq[T]; num: Positive; spread = true): seq[seq[T]]	
map	sequtils.html#map,openArray[T],proc(T)	sequtils : map[T, S](data: openArray[T]; op: proc (x: T): S): seq[S]	
map	sequtils.html#map,openArray[T],proc(T)_2	sequtils : map[T](data: var openArray[T]; op: proc (x: var T))	
apply	sequtils.html#apply,seq[T],proc(T)	sequtils : apply[T](data: var seq[T]; op: proc (x: var T))	
apply	sequtils.html#apply,seq[T],proc(T)_2	sequtils : apply[T](data: var seq[T]; op: proc (x: T): T)	
filter	sequtils.html#filter.i,seq[T],proc(T)	sequtils : filter[T](seq1: seq[T]; pred: proc (item: T): bool): T	
filter	sequtils.html#filter,seq[T],proc(T)	sequtils : filter[T](seq1: seq[T]; pred: proc (item: T): bool): seq[T]	
keepIf	sequtils.html#keepIf,seq[T],proc(T)	sequtils : keepIf[T](seq1: var seq[T]; pred: proc (item: T): bool)	
delete	sequtils.html#delete,seq[T],Natural,Natural	sequtils : delete[T](s: var seq[T]; first, last: Natural)	
insert	sequtils.html#insert,seq[T],openArray[T],int	sequtils : insert[T](dest: var seq[T]; src: openArray[T]; pos = 0)	
filterIt	sequtils.html#filterIt.t,expr,expr	sequtils : filterIt(seq1, pred: expr): expr	
keepItIf	sequtils.html#keepItIf.t,seq,expr	sequtils : keepItIf[seq](varSeq: seq; pred: expr)	
all	sequtils.html#all,seq[T],proc(T)	sequtils : all[T](seq1: seq[T]; pred: proc (item: T): bool): bool	
allIt	sequtils.html#allIt.t,expr,expr	sequtils : allIt(seq1, pred: expr): bool	
any	sequtils.html#any,seq[T],proc(T)	sequtils : any[T](seq1: seq[T]; pred: proc (item: T): bool): bool	
anyIt	sequtils.html#anyIt.t,expr,expr	sequtils : anyIt(seq1, pred: expr): bool	
toSeq	sequtils.html#toSeq.t,expr	sequtils : toSeq(iter: expr): expr	
foldl	sequtils.html#foldl.t,expr,expr	sequtils : foldl(sequence, operation: expr): expr	
foldl	sequtils.html#foldl.t,expr,expr,	sequtils : foldl(sequence, operation: expr; first): expr	
foldr	sequtils.html#foldr.t,expr,expr	sequtils : foldr(sequence, operation: expr): expr	
mapIt	sequtils.html#mapIt.t,expr,expr,expr	sequtils : mapIt(seq1, typ, op: expr): expr	
mapIt	sequtils.html#mapIt.t,expr,expr	sequtils : mapIt(seq1, op: expr): expr	
applyIt	sequtils.html#applyIt.t,expr,expr	sequtils : applyIt(varSeq, op: expr)	
newSeqWith	sequtils.html#newSeqWith.t,int,expr	sequtils : newSeqWith(len: int; init: expr): expr	
