SSL	net.html#ssl	 SSL	
Examples	net.html#examples	 Examples	
Connecting to a server	net.html#examples-connecting-to-a-server	  Connecting to a server	
Creating a server	net.html#examples-creating-a-server	  Creating a server	
SslError	net.html#SslError	net : SslError	
SslCVerifyMode	net.html#SslCVerifyMode	net : SslCVerifyMode	
SslProtVersion	net.html#SslProtVersion	net : SslProtVersion	
SslContext	net.html#SslContext	net : SslContext	
SslAcceptResult	net.html#SslAcceptResult	net : SslAcceptResult	
SslHandshakeType	net.html#SslHandshakeType	net : SslHandshakeType	
SslClientGetPskFunc	net.html#SslClientGetPskFunc	net : SslClientGetPskFunc	
SslServerGetPskFunc	net.html#SslServerGetPskFunc	net : SslServerGetPskFunc	
BufferSize	net.html#BufferSize	net : BufferSize	
SocketImpl	net.html#SocketImpl	net : SocketImpl	
Socket	net.html#Socket	net : Socket	
SOBool	net.html#SOBool	net : SOBool	
ReadLineResult	net.html#ReadLineResult	net : ReadLineResult	
TimeoutError	net.html#TimeoutError	net : TimeoutError	
SocketFlag	net.html#SocketFlag	net : SocketFlag	
IpAddressFamily	net.html#IpAddressFamily	net : IpAddressFamily	
IpAddress	net.html#IpAddress	net : IpAddress	
isDisconnectionError	net.html#isDisconnectionError,set[SocketFlag],OSErrorCode	net : isDisconnectionError(flags: set[SocketFlag]; lastError: OSErrorCode): bool	
toOSFlags	net.html#toOSFlags,set[SocketFlag]	net : toOSFlags(socketFlags: set[SocketFlag]): cint	
newSocket	net.html#newSocket,SocketHandle,Domain,SockType,Protocol	net : newSocket(fd: SocketHandle; domain: Domain = AF_INET;\n          sockType: SockType = SOCK_STREAM; protocol: Protocol = IPPROTO_TCP;\n          buffered = true): Socket	
newSocket	net.html#newSocket,cint,cint,cint	net : newSocket(domain, sockType, protocol: cint; buffered = true): Socket	
newSocket	net.html#newSocket,Domain,SockType,Protocol	net : newSocket(domain: Domain = AF_INET; sockType: SockType = SOCK_STREAM;\n          protocol: Protocol = IPPROTO_TCP; buffered = true): Socket	
raiseSSLError	net.html#raiseSSLError,string	net : raiseSSLError(s = &quot;&quot;)	
getExtraDataIndex	net.html#getExtraDataIndex,SslContext	net : getExtraDataIndex(ctx: SslContext): int	
getExtraData	net.html#getExtraData,SslContext,int	net : getExtraData(ctx: SslContext; index: int): RootRef	
setExtraData	net.html#setExtraData,SslContext,int,RootRef	net : setExtraData(ctx: SslContext; index: int; data: RootRef)	
newContext	net.html#newContext,string,string,string	net : newContext(protVersion = protSSLv23; verifyMode = CVerifyPeer; certFile = &quot;&quot;;\n           keyFile = &quot;&quot;; cipherList = &quot;ALL&quot;): SslContext	
destroyContext	net.html#destroyContext,SslContext	net : destroyContext(ctx: SslContext)	
pskIdentityHint=	net.html#pskIdentityHint=,SslContext,string	net : pskIdentityHint=(ctx: SslContext; hint: string)	
clientGetPskFunc	net.html#clientGetPskFunc,SslContext	net : clientGetPskFunc(ctx: SslContext): SslClientGetPskFunc	
clientGetPskFunc=	net.html#clientGetPskFunc=,SslContext,SslClientGetPskFunc	net : clientGetPskFunc=(ctx: SslContext; fun: SslClientGetPskFunc)	
serverGetPskFunc	net.html#serverGetPskFunc,SslContext	net : serverGetPskFunc(ctx: SslContext): SslServerGetPskFunc	
serverGetPskFunc=	net.html#serverGetPskFunc=,SslContext,SslServerGetPskFunc	net : serverGetPskFunc=(ctx: SslContext; fun: SslServerGetPskFunc)	
getPskIdentity	net.html#getPskIdentity,Socket	net : getPskIdentity(socket: Socket): string	
wrapSocket	net.html#wrapSocket,SslContext,Socket	net : wrapSocket(ctx: SslContext; socket: Socket)	
wrapConnectedSocket	net.html#wrapConnectedSocket,SslContext,Socket,SslHandshakeType	net : wrapConnectedSocket(ctx: SslContext; socket: Socket; handshake: SslHandshakeType)	
getSocketError	net.html#getSocketError,Socket	net : getSocketError(socket: Socket): OSErrorCode	
socketError	net.html#socketError,Socket,int	net : socketError(socket: Socket; err: int = - 1; async = false; lastError = -1.OSErrorCode): void	
listen	net.html#listen,Socket	net : listen(socket: Socket; backlog = SOMAXCONN)	
bindAddr	net.html#bindAddr,Socket,string	net : bindAddr(socket: Socket; port = Port(0); address = &quot;&quot;)	
acceptAddr	net.html#acceptAddr,Socket,Socket,string	net : acceptAddr(server: Socket; client: var Socket; address: var string;\n           flags = {SafeDisconn})	
accept	net.html#accept,Socket,Socket	net : accept(server: Socket; client: var Socket; flags = {SafeDisconn})	
close	net.html#close,Socket	net : close(socket: Socket)	
toCInt	net.html#toCInt,SOBool	net : toCInt(opt: SOBool): cint	
getSockOpt	net.html#getSockOpt,Socket,SOBool	net : getSockOpt(socket: Socket; opt: SOBool; level = SOL_SOCKET): bool	
getLocalAddr	net.html#getLocalAddr,Socket	net : getLocalAddr(socket: Socket): (string, Port)	
getPeerAddr	net.html#getPeerAddr,Socket	net : getPeerAddr(socket: Socket): (string, Port)	
setSockOpt	net.html#setSockOpt,Socket,SOBool,bool	net : setSockOpt(socket: Socket; opt: SOBool; value: bool; level = SOL_SOCKET)	
connectUnix	net.html#connectUnix,Socket,string	net : connectUnix(socket: Socket; path: string)	
bindUnix	net.html#bindUnix,Socket,string	net : bindUnix(socket: Socket; path: string)	
hasDataBuffered	net.html#hasDataBuffered,Socket	net : hasDataBuffered(s: Socket): bool	
recv	net.html#recv,Socket,pointer,int	net : recv(socket: Socket; data: pointer; size: int): int	
recv	net.html#recv,Socket,pointer,int,int	net : recv(socket: Socket; data: pointer; size: int; timeout: int): int	
recv	net.html#recv,Socket,string,int	net : recv(socket: Socket; data: var string; size: int; timeout = - 1; flags = {SafeDisconn}): int	
readLine	net.html#readLine,Socket,TaintedString	net : readLine(socket: Socket; line: var TaintedString; timeout = - 1; flags = {SafeDisconn})	
recvFrom	net.html#recvFrom,Socket,string,int,string,Port,int32	net : recvFrom(socket: Socket; data: var string; length: int; address: var string;\n         port: var Port; flags = 0&#x27;i32): int	
skip	net.html#skip,Socket,int	net : skip(socket: Socket; size: int; timeout = - 1)	
send	net.html#send,Socket,pointer,int	net : send(socket: Socket; data: pointer; size: int): int	
send	net.html#send,Socket,string	net : send(socket: Socket; data: string; flags = {SafeDisconn})	
`&amp;=`	net.html#&=.t,Socket,typed	net : `&amp;=`(socket: Socket; data: typed)	
trySend	net.html#trySend,Socket,string	net : trySend(socket: Socket; data: string): bool	
sendTo	net.html#sendTo,Socket,string,Port,pointer,int,Domain,int32	net : sendTo(socket: Socket; address: string; port: Port; data: pointer; size: int;\n       af: Domain = AF_INET; flags = 0&#x27;i32): int	
sendTo	net.html#sendTo,Socket,string,Port,string	net : sendTo(socket: Socket; address: string; port: Port; data: string): int	
isSsl	net.html#isSsl,Socket	net : isSsl(socket: Socket): bool	
getFd	net.html#getFd,Socket	net : getFd(socket: Socket): SocketHandle	
IPv4_any	net.html#IPv4_any,	net : IPv4_any(): IpAddress	
IPv4_loopback	net.html#IPv4_loopback,	net : IPv4_loopback(): IpAddress	
IPv4_broadcast	net.html#IPv4_broadcast,	net : IPv4_broadcast(): IpAddress	
IPv6_any	net.html#IPv6_any,	net : IPv6_any(): IpAddress	
IPv6_loopback	net.html#IPv6_loopback,	net : IPv6_loopback(): IpAddress	
`==`	net.html#==,IpAddress,IpAddress	net : `==`(lhs, rhs: IpAddress): bool	
`$`	net.html#$,IpAddress	net : `$`(address: IpAddress): string	
parseIpAddress	net.html#parseIpAddress,string	net : parseIpAddress(address_str: string): IpAddress	
isIpAddress	net.html#isIpAddress,string	net : isIpAddress(address_str: string): bool	
connect	net.html#connect,Socket,string	net : connect(socket: Socket; address: string; port = Port(0))	
connect	net.html#connect,Socket,string,int	net : connect(socket: Socket; address: string; port = Port(0); timeout: int)	
