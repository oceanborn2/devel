SortOrder	algorithm.html#SortOrder	algorithm : SortOrder	
`*`	algorithm.html#*,int,SortOrder	algorithm : `*`(x: int; order: SortOrder): int	
fill	algorithm.html#fill,openArray[T],Natural,Natural,T	algorithm : fill[T](a: var openArray[T]; first, last: Natural; value: T)	
fill	algorithm.html#fill,openArray[T],T	algorithm : fill[T](a: var openArray[T]; value: T)	
reverse	algorithm.html#reverse,openArray[T],Natural,Natural	algorithm : reverse[T](a: var openArray[T]; first, last: Natural)	
reverse	algorithm.html#reverse,openArray[T]	algorithm : reverse[T](a: var openArray[T])	
reversed	algorithm.html#reversed,openArray[T],Natural,int	algorithm : reversed[T](a: openArray[T]; first: Natural; last: int): seq[T]	
reversed	algorithm.html#reversed,openArray[T]	algorithm : reversed[T](a: openArray[T]): seq[T]	
binarySearch	algorithm.html#binarySearch,openArray[T],T	algorithm : binarySearch[T](a: openArray[T]; key: T): int	
smartBinarySearch	algorithm.html#smartBinarySearch,openArray[T],T	algorithm : smartBinarySearch[T](a: openArray[T]; key: T): int	
lowerBound	algorithm.html#lowerBound,openArray[T],T,proc(T,T)	algorithm : lowerBound[T](a: openArray[T]; key: T; cmp: proc (x, y: T): int): int	
lowerBound	algorithm.html#lowerBound,openArray[T],T	algorithm : lowerBound[T](a: openArray[T]; key: T): int	
sort	algorithm.html#sort,openArray[T],proc(T,T)	algorithm : sort[T](a: var openArray[T]; cmp: proc (x, y: T): int; order = SortOrder.Ascending)	
sorted	algorithm.html#sorted,openArray[T],proc(T,T)	algorithm : sorted[T](a: openArray[T]; cmp: proc (x, y: T): int; order = SortOrder.Ascending): seq[T]	
sortedByIt	algorithm.html#sortedByIt.t,expr,expr	algorithm : sortedByIt(seq1, op: expr): expr	
isSorted	algorithm.html#isSorted,openArray[T],proc(T,T)	algorithm : isSorted[T](a: openArray[T]; cmp: proc (x, y: T): int; order = SortOrder.Ascending): bool	
product	algorithm.html#product,openArray[seq[T]]	algorithm : product[T](x: openArray[seq[T]]): seq[seq[T]]	
nextPermutation	algorithm.html#nextPermutation,openArray[T]	algorithm : nextPermutation[T](x: var openArray[T]): bool	
prevPermutation	algorithm.html#prevPermutation,openArray[T]	algorithm : prevPermutation[T](x: var openArray[T]): bool	
