AST	macros.html#ast_1	Module macros	
The AST in Nim	macros.html#the-ast-in-nim	 The AST in Nim	
Leaf nodes/Atoms	macros.html#leaf-nodes-atoms	 Leaf nodes/Atoms	
Calls/expressions	macros.html#calls-expressions	 Calls/expressions	
Command call	macros.html#calls-expressions-command-call	  Command call	
Call with ()	macros.html#calls-expressions-call-with	  Call with <tt class="docutils literal"><span class="pre">()</span></tt>	
Infix operator call	macros.html#calls-expressions-infix-operator-call	  Infix operator call	
Prefix operator call	macros.html#calls-expressions-prefix-operator-call	  Prefix operator call	
Postfix operator call	macros.html#calls-expressions-postfix-operator-call	  Postfix operator call	
Call with named arguments	macros.html#calls-expressions-call-with-named-arguments	  Call with named arguments	
Call with raw string literal	macros.html#calls-expressions-call-with-raw-string-literal	  Call with raw string literal	
Dereference operator []	macros.html#calls-expressions-dereference-operator	  Dereference operator <tt class="docutils literal"><span class="pre">[]</span></tt>	
Addr operator	macros.html#calls-expressions-addr-operator	  Addr operator	
Cast operator	macros.html#calls-expressions-cast-operator	  Cast operator	
Object access operator .	macros.html#calls-expressions-object-access-operator	  Object access operator <tt class="docutils literal"><span class="pre">.</span></tt>	
Array access operator []	macros.html#calls-expressions-array-access-operator	  Array access operator <tt class="docutils literal"><span class="pre">[]</span></tt>	
Parentheses	macros.html#calls-expressions-parentheses	  Parentheses	
Curly braces	macros.html#calls-expressions-curly-braces	  Curly braces	
Brackets	macros.html#calls-expressions-brackets	  Brackets	
Ranges	macros.html#calls-expressions-ranges	  Ranges	
If expression	macros.html#calls-expressions-if-expression	  If expression	
Documentation Comments	macros.html#calls-expressions-documentation-comments	  Documentation Comments	
Pragmas	macros.html#calls-expressions-pragmas	  Pragmas	
Statements	macros.html#statements	 Statements	
If statement	macros.html#statements-if-statement	  If statement	
When statement	macros.html#statements-when-statement	  When statement	
Assignment	macros.html#statements-assignment	  Assignment	
Statement list	macros.html#statements-statement-list	  Statement list	
Case statement	macros.html#statements-case-statement	  Case statement	
While statement	macros.html#statements-while-statement	  While statement	
For statement	macros.html#statements-for-statement	  For statement	
Try statement	macros.html#statements-try-statement	  Try statement	
Return statement	macros.html#statements-return-statement	  Return statement	
Yield statement	macros.html#statements-yield-statement	  Yield statement	
Discard statement	macros.html#statements-discard-statement	  Discard statement	
Continue statement	macros.html#statements-continue-statement	  Continue statement	
Break statement	macros.html#statements-break-statement	  Break statement	
Block statement	macros.html#statements-block-statement	  Block statement	
Asm statement	macros.html#statements-asm-statement	  Asm statement	
Import section	macros.html#statements-import-section	  Import section	
From statement	macros.html#statements-from-statement	  From statement	
Export statement	macros.html#statements-export-statement	  Export statement	
Include statement	macros.html#statements-include-statement	  Include statement	
Var section	macros.html#statements-var-section	  Var section	
Let section	macros.html#statements-let-section	  Let section	
Const section	macros.html#statements-const-section	  Const section	
Type section	macros.html#statements-type-section	  Type section	
Bind statement	macros.html#statements-bind-statement	  Bind statement	
Procedure declaration	macros.html#statements-procedure-declaration	  Procedure declaration	
Iterator declaration	macros.html#statements-iterator-declaration	  Iterator declaration	
Converter declaration	macros.html#statements-converter-declaration	  Converter declaration	
Template declaration	macros.html#statements-template-declaration	  Template declaration	
Macro declaration	macros.html#statements-macro-declaration	  Macro declaration	
Special node kinds	macros.html#special-node-kinds	 Special node kinds	
NimNodeKind	macros.html#NimNodeKind	macros : NimNodeKind	
NimNodeKinds	macros.html#NimNodeKinds	macros : NimNodeKinds	
NimTypeKind	macros.html#NimTypeKind	macros : NimTypeKind	
TNimTypeKinds	macros.html#TNimTypeKinds	macros : TNimTypeKinds	
NimSymKind	macros.html#NimSymKind	macros : NimSymKind	
TNimSymKinds	macros.html#TNimSymKinds	macros : TNimSymKinds	
NimIdent	macros.html#NimIdent	macros : NimIdent	
NimSym	macros.html#NimSym	macros : NimSym	
nnkLiterals	macros.html#nnkLiterals	macros : nnkLiterals	
nnkCallKinds	macros.html#nnkCallKinds	macros : nnkCallKinds	
`[]`	macros.html#[],NimNode,int	macros : `[]`(n: NimNode; i: int): NimNode	
`[]=`	macros.html#[]=,NimNode,int,NimNode	macros : `[]=`(n: NimNode; i: int; child: NimNode)	
`!`	macros.html#!,string	macros : `!`(s: string): NimIdent	
`$`	macros.html#$,NimIdent	macros : `$`(i: NimIdent): string	
`$`	macros.html#$,NimSym	macros : `$`(s: NimSym): string	
`==`	macros.html#==,NimIdent,NimIdent	macros : `==`(a, b: NimIdent): bool	
`==`	macros.html#==,NimNode,NimNode	macros : `==`(a, b: NimNode): bool	
sameType	macros.html#sameType,NimNode,NimNode	macros : sameType(a, b: NimNode): bool	
len	macros.html#len,NimNode	macros : len(n: NimNode): int	
add	macros.html#add,NimNode,NimNode	macros : add(father, child: NimNode): NimNode	
add	macros.html#add,NimNode,varargs[NimNode]	macros : add(father: NimNode; children: varargs[NimNode]): NimNode	
del	macros.html#del,NimNode,int,int	macros : del(father: NimNode; idx = 0; n = 1)	
kind	macros.html#kind,NimNode	macros : kind(n: NimNode): NimNodeKind	
intVal	macros.html#intVal,NimNode	macros : intVal(n: NimNode): BiggestInt	
floatVal	macros.html#floatVal,NimNode	macros : floatVal(n: NimNode): BiggestFloat	
symbol	macros.html#symbol,NimNode	macros : symbol(n: NimNode): NimSym	
ident	macros.html#ident,NimNode	macros : ident(n: NimNode): NimIdent	
type	macros.html#type_1	Special node kinds	
getType	macros.html#getType,NimNode	macros : getType(n: NimNode): NimNode	
getType	macros.html#getType,typedesc	macros : getType[](n: typedesc): NimNode	
typeKind	macros.html#typeKind,NimNode	macros : typeKind(n: NimNode): NimTypeKind	
getTypeInst	macros.html#getTypeInst,NimNode	macros : getTypeInst(n: NimNode): NimNode	
getTypeInst	macros.html#getTypeInst,typedesc	macros : getTypeInst[](n: typedesc): NimNode	
getTypeImpl	macros.html#getTypeImpl,NimNode	macros : getTypeImpl(n: NimNode): NimNode	
getTypeImpl	macros.html#getTypeImpl,typedesc	macros : getTypeImpl[](n: typedesc): NimNode	
strVal	macros.html#strVal,NimNode	macros : strVal(n: NimNode): string	
intVal=	macros.html#intVal=,NimNode,BiggestInt	macros : intVal=(n: NimNode; val: BiggestInt)	
floatVal=	macros.html#floatVal=,NimNode,BiggestFloat	macros : floatVal=(n: NimNode; val: BiggestFloat)	
symbol=	macros.html#symbol=,NimNode,NimSym	macros : symbol=(n: NimNode; val: NimSym)	
ident=	macros.html#ident=,NimNode,NimIdent	macros : ident=(n: NimNode; val: NimIdent)	
strVal=	macros.html#strVal=,NimNode,string	macros : strVal=(n: NimNode; val: string)	
newNimNode	macros.html#newNimNode,NimNodeKind,NimNode	macros : newNimNode(kind: NimNodeKind; n: NimNode = nil): NimNode	
copyNimNode	macros.html#copyNimNode,NimNode	macros : copyNimNode(n: NimNode): NimNode	
copyNimTree	macros.html#copyNimTree,NimNode	macros : copyNimTree(n: NimNode): NimNode	
getImpl	macros.html#getImpl,NimSym	macros : getImpl(s: NimSym): NimNode	
error	macros.html#error,string	macros : error(msg: string)	
warning	macros.html#warning,string	macros : warning(msg: string)	
hint	macros.html#hint,string	macros : hint(msg: string)	
newStrLitNode	macros.html#newStrLitNode,string	macros : newStrLitNode(s: string): NimNode	
newIntLitNode	macros.html#newIntLitNode,BiggestInt	macros : newIntLitNode(i: BiggestInt): NimNode	
newFloatLitNode	macros.html#newFloatLitNode,BiggestFloat	macros : newFloatLitNode(f: BiggestFloat): NimNode	
newIdentNode	macros.html#newIdentNode,NimIdent	macros : newIdentNode(i: NimIdent): NimNode	
newIdentNode	macros.html#newIdentNode,string	macros : newIdentNode(i: string): NimNode	
BindSymRule	macros.html#BindSymRule	macros : BindSymRule	
bindSym	macros.html#bindSym,string,BindSymRule	macros : bindSym(ident: string; rule: BindSymRule = brClosed): NimNode	
genSym	macros.html#genSym,NimSymKind,string	macros : genSym(kind: NimSymKind = nskLet; ident = &quot;&quot;): NimNode	
callsite	macros.html#callsite,	macros : callsite(): NimNode	
toStrLit	macros.html#toStrLit,NimNode	macros : toStrLit(n: NimNode): NimNode	
lineinfo	macros.html#lineinfo,NimNode	macros : lineinfo(n: NimNode): string	
internalErrorFlag	macros.html#internalErrorFlag,	macros : internalErrorFlag(): string	
parseExpr	macros.html#parseExpr,string	macros : parseExpr(s: string): NimNode	
parseStmt	macros.html#parseStmt,string	macros : parseStmt(s: string): NimNode	
getAst	macros.html#getAst,expr	macros : getAst(macroOrTemplate: expr): NimNode	
quote	macros.html#quote,stmt,string	macros : quote(bl: stmt; op = &quot;``&quot;): NimNode	
expectKind	macros.html#expectKind,NimNode,NimNodeKind	macros : expectKind(n: NimNode; k: NimNodeKind)	
expectMinLen	macros.html#expectMinLen,NimNode,int	macros : expectMinLen(n: NimNode; min: int)	
expectLen	macros.html#expectLen,NimNode,int	macros : expectLen(n: NimNode; len: int)	
newTree	macros.html#newTree,NimNodeKind,varargs[NimNode]	macros : newTree(kind: NimNodeKind; children: varargs[NimNode]): NimNode	
newCall	macros.html#newCall,NimNode,varargs[NimNode]	macros : newCall(theProc: NimNode; args: varargs[NimNode]): NimNode	
newCall	macros.html#newCall,NimIdent,varargs[NimNode]	macros : newCall(theProc: NimIdent; args: varargs[NimNode]): NimNode	
newCall	macros.html#newCall,string,varargs[NimNode]	macros : newCall(theProc: string; args: varargs[NimNode]): NimNode	
newLit	macros.html#newLit,char	macros : newLit(c: char): NimNode	
newLit	macros.html#newLit,BiggestInt	macros : newLit(i: BiggestInt): NimNode	
newLit	macros.html#newLit,bool	macros : newLit(b: bool): NimNode	
newLit	macros.html#newLit,BiggestFloat	macros : newLit(f: BiggestFloat): NimNode	
newLit	macros.html#newLit,string	macros : newLit(s: string): NimNode	
nestList	macros.html#nestList,NimIdent,NimNode	macros : nestList(theProc: NimIdent; x: NimNode): NimNode	
treeRepr	macros.html#treeRepr,NimNode	macros : treeRepr(n: NimNode): string	
lispRepr	macros.html#lispRepr,NimNode	macros : lispRepr(n: NimNode): string	
dumpTree	macros.html#dumpTree.m,stmt	macros : dumpTree(s: stmt): stmt	
dumpLisp	macros.html#dumpLisp.m,stmt	macros : dumpLisp(s: stmt): stmt	
dumpTreeImm	macros.html#dumpTreeImm.m,stmt	macros : dumpTreeImm(s: stmt): stmt	
dumpLispImm	macros.html#dumpLispImm.m,stmt	macros : dumpLispImm(s: stmt): stmt	
newEmptyNode	macros.html#newEmptyNode,	macros : newEmptyNode(): NimNode	
newStmtList	macros.html#newStmtList,varargs[NimNode]	macros : newStmtList(stmts: varargs[NimNode]): NimNode	
newPar	macros.html#newPar,varargs[NimNode]	macros : newPar(exprs: varargs[NimNode]): NimNode	
newBlockStmt	macros.html#newBlockStmt,NimNode,NimNode	macros : newBlockStmt(label, body: NimNode): NimNode	
newBlockStmt	macros.html#newBlockStmt,NimNode	macros : newBlockStmt(body: NimNode): NimNode	
newVarStmt	macros.html#newVarStmt,NimNode,NimNode	macros : newVarStmt(name, value: NimNode): NimNode	
newLetStmt	macros.html#newLetStmt,NimNode,NimNode	macros : newLetStmt(name, value: NimNode): NimNode	
newConstStmt	macros.html#newConstStmt,NimNode,NimNode	macros : newConstStmt(name, value: NimNode): NimNode	
newAssignment	macros.html#newAssignment,NimNode,NimNode	macros : newAssignment(lhs, rhs: NimNode): NimNode	
newDotExpr	macros.html#newDotExpr,NimNode,NimNode	macros : newDotExpr(a, b: NimNode): NimNode	
newColonExpr	macros.html#newColonExpr,NimNode,NimNode	macros : newColonExpr(a, b: NimNode): NimNode	
newIdentDefs	macros.html#newIdentDefs,NimNode,NimNode	macros : newIdentDefs(name, kind: NimNode; default = newEmptyNode()): NimNode	
newNilLit	macros.html#newNilLit,	macros : newNilLit(): NimNode	
last	macros.html#last,NimNode	macros : last(node: NimNode): NimNode	
RoutineNodes	macros.html#RoutineNodes	macros : RoutineNodes	
AtomicNodes	macros.html#AtomicNodes	macros : AtomicNodes	
CallNodes	macros.html#CallNodes	macros : CallNodes	
expectKind	macros.html#expectKind,NimNode,set[NimNodeKind]	macros : expectKind(n: NimNode; k: set[NimNodeKind])	
newProc	macros.html#newProc,openArray[NimNode],NimNode	macros : newProc(name = newEmptyNode(); params: openArray[NimNode] = [newEmptyNode()];\n        body: NimNode = newStmtList(); procType = nnkProcDef): NimNode	
newIfStmt	macros.html#newIfStmt,varargs[tuple[NimNode,NimNode]]	macros : newIfStmt(branches: varargs[tuple[cond, body: NimNode]]): NimNode	
copyChildrenTo	macros.html#copyChildrenTo,NimNode,NimNode	macros : copyChildrenTo(src, dest: NimNode)	
name	macros.html#name,NimNode	macros : name(someProc: NimNode): NimNode	
name=	macros.html#name=,NimNode,NimNode	macros : name=(someProc: NimNode; val: NimNode)	
params	macros.html#params,NimNode	macros : params(someProc: NimNode): NimNode	
params=	macros.html#params=,NimNode,NimNode	macros : params=(someProc: NimNode; params: NimNode)	
pragma	macros.html#pragma,NimNode	macros : pragma(someProc: NimNode): NimNode	
pragma=	macros.html#pragma=,NimNode,NimNode	macros : pragma=(someProc: NimNode; val: NimNode)	
body	macros.html#body,NimNode	macros : body(someProc: NimNode): NimNode	
body=	macros.html#body=,NimNode,NimNode	macros : body=(someProc: NimNode; val: NimNode)	
`$`	macros.html#$,NimNode	macros : `$`(node: NimNode): string	
ident	macros.html#ident,string	macros : ident(name: string): NimNode	
items	macros.html#items.i,NimNode	macros : items(n: NimNode): NimNode	
children	macros.html#children.i,NimNode	macros : children(n: NimNode): NimNode	
findChild	macros.html#findChild.t,NimNode,expr	macros : findChild(n: NimNode; cond: expr): NimNode	
insert	macros.html#insert,NimNode,int,NimNode	macros : insert(a: NimNode; pos: int; b: NimNode)	
basename	macros.html#basename,NimNode	macros : basename(a: NimNode): NimNode	
basename=	macros.html#basename=,NimNode,string	macros : basename=(a: NimNode; val: string)	
postfix	macros.html#postfix,NimNode,string	macros : postfix(node: NimNode; op: string): NimNode	
prefix	macros.html#prefix,NimNode,string	macros : prefix(node: NimNode; op: string): NimNode	
infix	macros.html#infix,NimNode,string,NimNode	macros : infix(a: NimNode; op: string; b: NimNode): NimNode	
unpackPostfix	macros.html#unpackPostfix,NimNode	macros : unpackPostfix(node: NimNode): tuple[node: NimNode, op: string]	
unpackPrefix	macros.html#unpackPrefix,NimNode	macros : unpackPrefix(node: NimNode): tuple[node: NimNode, op: string]	
unpackInfix	macros.html#unpackInfix,NimNode	macros : unpackInfix(node: NimNode): tuple[left: NimNode, op: string, right: NimNode]	
copy	macros.html#copy,NimNode	macros : copy(node: NimNode): NimNode	
eqIdent	macros.html#eqIdent,string,string	macros : eqIdent(a, b: string): bool	
eqIdent	macros.html#eqIdent,NimNode,string	macros : eqIdent(node: NimNode; s: string): bool	
hasArgOfName	macros.html#hasArgOfName,NimNode,string	macros : hasArgOfName(params: NimNode; name: string): bool	
addIdentIfAbsent	macros.html#addIdentIfAbsent,NimNode,string	macros : addIdentIfAbsent(dest: NimNode; ident: string)	
boolVal	macros.html#boolVal,NimNode	macros : boolVal(n: NimNode): bool	
emit	macros.html#emit.t,	macros : emit[](e: static[string]): stmt	
