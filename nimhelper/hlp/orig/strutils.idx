CharSet	strutils.html#CharSet	strutils : CharSet	
Whitespace	strutils.html#Whitespace	strutils : Whitespace	
Letters	strutils.html#Letters	strutils : Letters	
Digits	strutils.html#Digits	strutils : Digits	
HexDigits	strutils.html#HexDigits	strutils : HexDigits	
IdentChars	strutils.html#IdentChars	strutils : IdentChars	
IdentStartChars	strutils.html#IdentStartChars	strutils : IdentStartChars	
NewLines	strutils.html#NewLines	strutils : NewLines	
AllChars	strutils.html#AllChars	strutils : AllChars	
isAlpha	strutils.html#isAlpha,char	strutils : isAlpha(c: char): bool	
isAlphaNumeric	strutils.html#isAlphaNumeric,char	strutils : isAlphaNumeric(c: char): bool	
isDigit	strutils.html#isDigit,char	strutils : isDigit(c: char): bool	
isSpace	strutils.html#isSpace,char	strutils : isSpace(c: char): bool	
isLower	strutils.html#isLower,char	strutils : isLower(c: char): bool	
isUpper	strutils.html#isUpper,char	strutils : isUpper(c: char): bool	
isAlpha	strutils.html#isAlpha,string	strutils : isAlpha(s: string): bool	
isAlphaNumeric	strutils.html#isAlphaNumeric,string	strutils : isAlphaNumeric(s: string): bool	
isDigit	strutils.html#isDigit,string	strutils : isDigit(s: string): bool	
isSpace	strutils.html#isSpace,string	strutils : isSpace(s: string): bool	
isLower	strutils.html#isLower,string	strutils : isLower(s: string): bool	
isUpper	strutils.html#isUpper,string	strutils : isUpper(s: string): bool	
toLower	strutils.html#toLower,char	strutils : toLower(c: char): char	
toLower	strutils.html#toLower,string	strutils : toLower(s: string): string	
toUpper	strutils.html#toUpper,char	strutils : toUpper(c: char): char	
toUpper	strutils.html#toUpper,string	strutils : toUpper(s: string): string	
capitalize	strutils.html#capitalize,string	strutils : capitalize(s: string): string	
normalize	strutils.html#normalize,string	strutils : normalize(s: string): string	
cmpIgnoreCase	strutils.html#cmpIgnoreCase,string,string	strutils : cmpIgnoreCase(a, b: string): int	
cmpIgnoreStyle	strutils.html#cmpIgnoreStyle,string,string	strutils : cmpIgnoreStyle(a, b: string): int	
strip	strutils.html#strip,string,set[char]	strutils : strip(s: string; leading = true; trailing = true; chars: set[char] = Whitespace): string	
toOctal	strutils.html#toOctal,char	strutils : toOctal(c: char): string	
split	strutils.html#split.i,string,set[char],int	strutils : split(s: string; seps: set[char] = Whitespace; maxsplit: int = - 1): string	
split	strutils.html#split.i,string,char,int	strutils : split(s: string; sep: char; maxsplit: int = - 1): string	
split	strutils.html#split.i,string,string,int	strutils : split(s: string; sep: string; maxsplit: int = - 1): string	
rsplit	strutils.html#rsplit.i,string,set[char],int	strutils : rsplit(s: string; seps: set[char] = Whitespace; maxsplit: int = - 1): string	
rsplit	strutils.html#rsplit.i,string,char,int	strutils : rsplit(s: string; sep: char; maxsplit: int = - 1): string	
rsplit	strutils.html#rsplit.i,string,string,int,bool	strutils : rsplit(s: string; sep: string; maxsplit: int = - 1; keepSeparators: bool = false): string	
splitLines	strutils.html#splitLines.i,string	strutils : splitLines(s: string): string	
splitLines	strutils.html#splitLines,string	strutils : splitLines(s: string): seq[string]	
countLines	strutils.html#countLines,string	strutils : countLines(s: string): int	
split	strutils.html#split,string,set[char],int	strutils : split(s: string; seps: set[char] = Whitespace; maxsplit: int = - 1): seq[string]	
split	strutils.html#split,string,char,int	strutils : split(s: string; sep: char; maxsplit: int = - 1): seq[string]	
split	strutils.html#split,string,string,int	strutils : split(s: string; sep: string; maxsplit: int = - 1): seq[string]	
rsplit	strutils.html#rsplit,string,set[char],int	strutils : rsplit(s: string; seps: set[char] = Whitespace; maxsplit: int = - 1): seq[string]	
rsplit	strutils.html#rsplit,string,char,int	strutils : rsplit(s: string; sep: char; maxsplit: int = - 1): seq[string]	
rsplit	strutils.html#rsplit,string,string,int	strutils : rsplit(s: string; sep: string; maxsplit: int = - 1): seq[string]	
toHex	strutils.html#toHex,BiggestInt,Positive	strutils : toHex(x: BiggestInt; len: Positive): string	
toHex	strutils.html#toHex,T	strutils : toHex[T](x: T): string	
intToStr	strutils.html#intToStr,int,Positive	strutils : intToStr(x: int; minchars: Positive = 1): string	
parseInt	strutils.html#parseInt,string	strutils : parseInt(s: string): int	
parseBiggestInt	strutils.html#parseBiggestInt,string	strutils : parseBiggestInt(s: string): BiggestInt	
parseUInt	strutils.html#parseUInt,string	strutils : parseUInt(s: string): uint	
parseBiggestUInt	strutils.html#parseBiggestUInt,string	strutils : parseBiggestUInt(s: string): uint64	
parseFloat	strutils.html#parseFloat,string	strutils : parseFloat(s: string): float	
parseHexInt	strutils.html#parseHexInt,string	strutils : parseHexInt(s: string): int	
parseBool	strutils.html#parseBool,string	strutils : parseBool(s: string): bool	
parseEnum	strutils.html#parseEnum,string	strutils : parseEnum[T: enum](s: string): T	
parseEnum	strutils.html#parseEnum,string,T	strutils : parseEnum[T: enum](s: string; default: T): T	
repeat	strutils.html#repeat,char,Natural	strutils : repeat(c: char; count: Natural): string	
repeat	strutils.html#repeat,string,Natural	strutils : repeat(s: string; n: Natural): string	
spaces	strutils.html#spaces.t,Natural	strutils : spaces(n: Natural): string	
repeatChar	strutils.html#repeatChar,Natural,char	strutils : repeatChar(count: Natural; c: char = &#x27; &#x27;): string	
repeatStr	strutils.html#repeatStr,Natural,string	strutils : repeatStr(count: Natural; s: string): string	
align	strutils.html#align,string,Natural,Char	strutils : align(s: string; count: Natural; padding = &#x27; &#x27;): string	
tokenize	strutils.html#tokenize.i,string,set[char]	strutils : tokenize(s: string; seps: set[char] = Whitespace): tuple[token: string, isSep: bool]	
wordWrap	strutils.html#wordWrap,string,int,set[char],string	strutils : wordWrap(s: string; maxLineWidth = 80; splitLongWords = true;\n         seps: set[char] = Whitespace; newLine = &quot;\\x0A&quot;): string	
indent	strutils.html#indent,string,Natural,string	strutils : indent(s: string; count: Natural; padding: string = &quot; &quot;): string	
unindent	strutils.html#unindent,string,Natural,string	strutils : unindent(s: string; count: Natural; padding: string = &quot; &quot;): string	
unindent	strutils.html#unindent,string	strutils : unindent(s: string): string	
startsWith	strutils.html#startsWith,string,string	strutils : startsWith(s, prefix: string): bool	
startsWith	strutils.html#startsWith,string,char	strutils : startsWith(s: string; prefix: char): bool	
endsWith	strutils.html#endsWith,string,string	strutils : endsWith(s, suffix: string): bool	
endsWith	strutils.html#endsWith,string,char	strutils : endsWith(s: string; suffix: char): bool	
continuesWith	strutils.html#continuesWith,string,string,Natural	strutils : continuesWith(s, substr: string; start: Natural): bool	
addSep	strutils.html#addSep,string,string,Natural	strutils : addSep(dest: var string; sep = &quot;, &quot;; startLen: Natural = 0)	
allCharsInSet	strutils.html#allCharsInSet,string,set[char]	strutils : allCharsInSet(s: string; theSet: set[char]): bool	
abbrev	strutils.html#abbrev,string,openArray[string]	strutils : abbrev(s: string; possibilities: openArray[string]): int	
join	strutils.html#join,openArray[string],string	strutils : join(a: openArray[string]; sep: string = &quot;&quot;): string	
join	strutils.html#join,openArray[T],string	strutils : join[T: not string](a: openArray[T]; sep: string = &quot;&quot;): string	
find	strutils.html#find,string,string,Natural	strutils : find(s, sub: string; start: Natural = 0): int	
find	strutils.html#find,string,char,Natural	strutils : find(s: string; sub: char; start: Natural = 0): int	
find	strutils.html#find,string,set[char],Natural	strutils : find(s: string; chars: set[char]; start: Natural = 0): int	
rfind	strutils.html#rfind,string,string,int	strutils : rfind(s, sub: string; start: int = - 1): int	
rfind	strutils.html#rfind,string,char,int	strutils : rfind(s: string; sub: char; start: int = - 1): int	
center	strutils.html#center,string,int,char	strutils : center(s: string; width: int; fillChar: char = &#x27; &#x27;): string	
count	strutils.html#count,string,string,bool	strutils : count(s: string; sub: string; overlapping: bool = false): int	
count	strutils.html#count,string,char	strutils : count(s: string; sub: char): int	
count	strutils.html#count,string,set[char]	strutils : count(s: string; subs: set[char]): int	
quoteIfContainsWhite	strutils.html#quoteIfContainsWhite,string	strutils : quoteIfContainsWhite(s: string): string	
contains	strutils.html#contains,string,char	strutils : contains(s: string; c: char): bool	
contains	strutils.html#contains,string,string	strutils : contains(s, sub: string): bool	
contains	strutils.html#contains,string,set[char]	strutils : contains(s: string; chars: set[char]): bool	
replace	strutils.html#replace,string,string,string	strutils : replace(s, sub: string; by = &quot;&quot;): string	
replace	strutils.html#replace,string,char,char	strutils : replace(s: string; sub, by: char): string	
replaceWord	strutils.html#replaceWord,string,string,string	strutils : replaceWord(s, sub: string; by = &quot;&quot;): string	
delete	strutils.html#delete,string,int,int	strutils : delete(s: var string; first, last: int)	
parseOctInt	strutils.html#parseOctInt,string	strutils : parseOctInt(s: string): int	
toOct	strutils.html#toOct,BiggestInt,Positive	strutils : toOct(x: BiggestInt; len: Positive): string	
toBin	strutils.html#toBin,BiggestInt,Positive	strutils : toBin(x: BiggestInt; len: Positive): string	
insertSep	strutils.html#insertSep,string,Char,int	strutils : insertSep(s: string; sep = &#x27;_&#x27;; digits = 3): string	
escape	strutils.html#escape,string,string,string	strutils : escape(s: string; prefix = &quot;\\&quot;&quot;; suffix = &quot;\\&quot;&quot;): string	
unescape	strutils.html#unescape,string,string,string	strutils : unescape(s: string; prefix = &quot;\\&quot;&quot;; suffix = &quot;\\&quot;&quot;): string	
validIdentifier	strutils.html#validIdentifier,string	strutils : validIdentifier(s: string): bool	
Levenshtein	strutils.html#levenshtein_1	Module strutils	
editDistance	strutils.html#editDistance,string,string	strutils : editDistance(a, b: string): int	
FloatFormatMode	strutils.html#FloatFormatMode	strutils : FloatFormatMode	
formatBiggestFloat	strutils.html#formatBiggestFloat,BiggestFloat,FloatFormatMode,range[],Char	strutils : formatBiggestFloat(f: BiggestFloat; format: FloatFormatMode = ffDefault;\n                   precision: range[0 .. 32] = 16; decimalSep = &#x27;.&#x27;): string	
formatFloat	strutils.html#formatFloat,float,FloatFormatMode,range[],Char	strutils : formatFloat(f: float; format: FloatFormatMode = ffDefault;\n            precision: range[0 .. 32] = 16; decimalSep = &#x27;.&#x27;): string	
trimZeros	strutils.html#trimZeros,string	strutils : trimZeros(x: var string)	
BinaryPrefixMode	strutils.html#BinaryPrefixMode	strutils : BinaryPrefixMode	
formatSize	strutils.html#formatSize,int64,Char	strutils : formatSize(bytes: int64; decimalSep = &#x27;.&#x27;; prefix = bpIEC; includeSpace = false): string	
formatEng	strutils.html#formatEng,BiggestFloat,range[],bool,bool,string,Char	strutils : formatEng(f: BiggestFloat; precision: range[0 .. 32] = 10; trim: bool = true;\n          siPrefix: bool = false; unit: string = nil; decimalSep = &#x27;.&#x27;): string	
addf	strutils.html#addf,string,string,varargs[string,]	strutils : addf(s: var string; formatstr: string; a: varargs[string, `$`])	
substitution	strutils.html#substitution_1	Module strutils	
string interpolation	strutils.html#string-interpolation_1	Module strutils	
`%`	strutils.html#%,string,openArray[string]	strutils : `%`(formatstr: string; a: openArray[string]): string	
`%`	strutils.html#%,string,string	strutils : `%`(formatstr, a: string): string	
format	strutils.html#format,string,varargs[string,]	strutils : format(formatstr: string; a: varargs[string, `$`]): string	
removeSuffix	strutils.html#removeSuffix,string,set[char]	strutils : removeSuffix(s: var string; chars: set[char] = Newlines)	
removeSuffix	strutils.html#removeSuffix,string,char	strutils : removeSuffix(s: var string; c: char)	
removeSuffix	strutils.html#removeSuffix,string,string	strutils : removeSuffix(s: var string; suffix: string)	
