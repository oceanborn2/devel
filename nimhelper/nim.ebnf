module     ::= stmt*  IND
comma      ::= ',' comment?
semicolon  ::= ';' comment?
tupleClass ::= 'tuple'
colon      ::= ':' comment?
colcom     ::= ':' comment?

operator ::=  OP0 | OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 | OP8 | OP9 | 'or' | 'xor' | 'and' | 'is' | 'isnot' | 'in' | 'notin' | 'of' | 'div' | 'mod' | 'shl' | 'shr' | 'not' | 'static' | '..'

prefixOperator      ::= operator
optInd              ::= comment?
optPar              ::= (IND '{>}' | IND '{=}')?
simpleExpr          ::= arrowExpr (OP0 optInd arrowExpr)*
arrowExpr           ::= assignExpr (OP1 optInd assignExpr)*
assignExpr          ::= orExpr (OP2 optInd orExpr)*
orExpr              ::= andExpr (OP3 optInd andExpr)*
andExpr             ::= cmpExpr (OP4 optInd cmpExpr)*
cmpExpr             ::= sliceExpr (OP5 optInd sliceExpr)*
sliceExpr           ::= ampExpr (OP6 optInd ampExpr)*
ampExpr             ::= plusExpr (OP7 optInd plusExpr)*
plusExpr            ::= mulExpr (OP8 optInd mulExpr)*
mulExpr             ::= dollarExpr (OP9 optInd dollarExpr)*
dollarExpr          ::= primary (OP10 optInd primary)*
symbol              ::= '`' (KEYW|IDENT|literal|(operator|'('|')'|'['|']'|'{'|'}'|'=')+)+ '`' | IDENT | 'addr' | 'type'
indexExpr           ::= expr         
indexExprList       ::= indexExpr '__^+__' comma
exprColonEqExpr     ::= expr (':'|'=' expr)?
exprList            ::= expr '__^+__' comma
dotExpr             ::= expr '.' optInd symbol
qualifiedIdent      ::= symbol ('.' optInd symbol)?
exprColonEqExprList ::= exprColonEqExpr (comma exprColonEqExpr)* (comma)?
setOrTableConstr    ::= '{' ((exprColonEqExpr comma)* | ':' ) '}'
castExpr            ::= 'cast' '[' optInd typeDesc optPar ']' '(' optInd expr optPar ')'
parKeyw             ::= 'discard' | 'include' | 'if' | 'while' | 'case' | 'try'
        | 'finally' | 'except' | 'for' | 'block' | 'const' | 'let'
        | 'when' | 'var' | 'mixin'
par                 ::= '(' optInd
          ( '__&__' parKeyw complexOrSimpleStmt '__^+__' ';'
          | ';' complexOrSimpleStmt '__^+__' ';'
          | pragmaStmt
          | simpleExpr ( ('=' expr (';' complexOrSimpleStmt '__^+__' ';' )? )
                       | (':' expr (',' exprColonEqExpr     '__^+__' ',' )? ) ) )
          optPar ')'

literal             ::= | INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT
          | UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT
          | FLOAT_LIT | FLOAT32_LIT | FLOAT64_LIT
          | STR_LIT | RSTR_LIT | TRIPLESTR_LIT
          | CHAR_LIT
          | NIL

generalizedLit      ::= GENERALIZED_STR_LIT | GENERALIZED_TRIPLESTR_LIT
identOrLiteral      ::= generalizedLit | symbol | literal | par | arrayConstr | setOrTableConstr | castExpr
tupleConstr         ::= '(' optInd (exprColonEqExpr comma?)* optPar ')'
arrayConstr         ::= '[' optInd (exprColonEqExpr comma?)* optPar ']'
primarySuffix       ::= '(' (exprColonEqExpr comma?)* ')' doBlocks?
      | doBlocks
      | '.' optInd symbol generalizedLit?
      | '[' optInd indexExprList optPar ']'
      | '{' optInd indexExprList optPar '}'
      | '__&__' ( '`'|IDENT|literal|'cast'|'addr'|'type') expr 

condExpr    ::= expr colcom expr optInd
        ('elif' expr colcom expr optInd)*
         'else' colcom expr
ifExpr              ::= 'if' condExpr
whenExpr            ::= 'when' condExpr
pragma              ::= '{.' optInd (exprColonExpr comma?)* optPar ('.}' | '}')
identVis            ::= symbol opr?  
identVisDot         ::= symbol '.' optInd symbol opr?
identWithPragma     ::= identVis pragma?
identWithPragmaDot  ::= identVisDot pragma?
declColonEquals     ::= identWithPragma (comma identWithPragma)* comma?
                  (':' optInd typeDesc)? ('=' optInd expr)?
identColonEquals    ::= ident (comma ident)* comma?   (':' optInd typeDesc)? ('=' optInd expr)?) 
inlTupleDecl ::= 'tuple' [' optInd  (identColonEquals (comma/semicolon)?)*  optPar ']'
extTupleDecl ::= 'tuple' COMMENT? (IND'__{>}__' identColonEquals (IND '__{=}__' identColonEquals)*)?
tupleClass ::= 'tuple'
paramList ::= '(' declColonEquals '__^*__' (comma/semicolon) ')'
paramListArrow ::= paramList? ('->' optInd typeDesc)?
paramListColon ::= paramList? (':' optInd typeDesc)?
doBlock  ::= 'do' paramListArrow pragmas? colcom stmt
doBlocks ::= doBlock '__^*__' IND '__{=}__'
procExpr ::= 'proc' paramListColon pragmas? ('=' COMMENT? stmt)?
distinct ::= 'distinct' optInd typeDesc
expr ::= (ifExpr
      | whenExpr
      | caseExpr
      | tryExpr)
      / simpleExpr
typeKeyw ::= 'var' | 'out' | 'ref' | 'ptr' | 'shared' | 'tuple' | 'proc' | 'iterator' | 'distinct' | 'object' | 'enum'
primary ::= typeKeyw typeDescK
        /  prefixOperator* identOrLiteral primarySuffix*
        / 'static' primary
        / 'bind' primary
typeDesc ::= simpleExpr
typeDefAux ::= simpleExpr
           | 'concept' typeClass
macroColon ::= ':' stmt? ( IND '__{=}__' 'of' exprList ':' stmt
                       | IND '__{=}__' 'elif' expr ':' stmt
                       | IND '__{=}__' 'except' exprList ':' stmt
                       | IND '__{=}__' 'else' ':' stmt )*
exprStmt ::= simpleExpr
         (( '=' optInd expr )
         / ( expr '__^+__' comma
             doBlocks
              / macroColon
           ))?
importStmt ::= 'import' optInd expr
              ((comma expr)*
              / 'except' optInd (expr '__^+__' comma))
includeStmt ::= 'include' optInd expr '__^+__' comma
fromStmt ::= 'from' moduleName 'import' optInd expr (comma expr)*
returnStmt ::= 'return' optInd expr?
raiseStmt ::= 'raise' optInd expr?
yieldStmt ::= 'yield' optInd expr?
discardStmt ::= 'discard' optInd expr?
breakStmt ::= 'break' optInd expr?
continueStmt ::= 'break' optInd expr?
condStmt ::= expr colcom stmt COMMENT?
           (IND '__{=}__' 'elif' expr colcom stmt)*
           (IND '__{=}__' 'else' colcom stmt)?
ifStmt ::= 'if' condStmt
whenStmt ::= 'when' condStmt
whileStmt ::= 'while' expr colcom stmt
ofBranch ::= 'of' exprList colcom stmt
ofBranches ::= ofBranch (IND '__{=}__' ofBranch)*
                      (IND '__{=}__' 'elif' expr colcom stmt)*
                      (IND '__{=}__' 'else' colcom stmt)?
caseStmt ::= 'case' expr ':'? COMMENT?
            (IND{>} ofBranches DED
            | IND '__{=}__' ofBranches)
tryStmt ::= 'try' colcom stmt &(IND '__{=}__'? 'except'|'finally')
           (IND '__{=}__'? 'except' exprList colcom stmt)*
           (IND '__{=}__'? 'finally' colcom stmt)?
tryExpr ::= 'try' colcom stmt '__&__' (optInd 'except'|'finally')
           (optInd 'except' exprList colcom stmt)*
           (optInd 'finally' colcom stmt)?
exceptBlock ::= 'except' colcom stmt
forStmt ::= 'for' (identWithPragma '__^+__' comma) 'in' expr colcom stmt
blockStmt ::= 'block' symbol? colcom stmt
staticStmt ::= 'static' colcom stmt
deferStmt ::= 'defer' colcom stmt
asmStmt ::= 'asm' pragma? (STR_LIT | RSTR_LIT | TRIPLE_STR_LIT)
genericParam ::= symbol (comma symbol)* (colon expr)? ('=' optInd expr)?
genericParamList ::= '[' optInd
  genericParam ^* (comma/semicolon) optPar ']'
pattern ::= '{' stmt '}'
indAndComment ::= (IND{>} COMMENT)? | COMMENT?
routine ::= optInd identVis pattern? genericParamList?
  paramListColon pragma? ('=' COMMENT? stmt)? indAndComment
commentStmt ::= COMMENT
section(p) ::= COMMENT? p / (IND{>} (p / COMMENT)'__^+__' IND '__{=}__' DED)
constant ::= identWithPragma (colon typedesc)? '=' optInd expr indAndComment
enum ::= 'enum' optInd (symbol optInd ('=' optInd expr COMMENT?)? comma?)+
objectWhen ::= 'when' expr colcom objectPart COMMENT?
            ('elif' expr colcom objectPart COMMENT?)*
            ('else' colcom objectPart COMMENT?)?
objectBranch ::= 'of' exprList colcom objectPart
objectBranches ::= objectBranch (IND '__{=}__' objectBranch)*
                      (IND '__{=}__' 'elif' expr colcom objectPart)*
                      (IND '__{=}__' 'else' colcom objectPart)?
objectCase ::= 'case' identWithPragma ':' typeDesc ':'? COMMENT?
            (IND '__{>}__' objectBranches DED
            | IND '__{=}__' objectBranches)
objectPart ::= IND '__{>}__' objectPart '__^+__' IND'__{=}__' DED
           / objectWhen / objectCase / 'nil' / 'discard' / declColonEquals
object = 'object' pragma? ('of' typeDesc)? COMMENT? objectPart
typeClassParam ::= ('var' | 'out')? symbol
typeClass ::= typeClassParam ^* ',' (pragma)? ('of' typeDesc ^* ',')?
              &IND{>} stmt
typeDef ::= identWithPragmaDot genericParamList? '=' optInd typeDefAux
            indAndComment?
varTuple ::= '(' optInd identWithPragma ^+ comma optPar ')' '=' optInd expr
variable ::= (varTuple / identColonEquals) indAndComment
bindStmt ::= 'bind' optInd qualifiedIdent ^+ comma
mixinStmt ::= 'mixin' optInd qualifiedIdent ^+ comma
pragmaStmt ::= pragma (':' COMMENT? stmt)?
simpleStmt ::= ((returnStmt | raiseStmt | yieldStmt | discardStmt | breakStmt
           | continueStmt | pragmaStmt | importStmt | exportStmt | fromStmt
           | includeStmt | commentStmt) / exprStmt) COMMENT?
complexOrSimpleStmt ::= (ifStmt | whenStmt | whileStmt
                    | tryStmt | forStmt
                    | blockStmt | staticStmt | deferStmt | asmStmt
                    | 'proc' routine
                    | 'method' routine
                    | 'iterator' routine
                    | 'macro' routine
                    | 'template' routine
                    | 'converter' routine
                    | 'type' section(typeDef)
                    | 'const' section(constant)
                    | ('let' | 'var') section(variable)
                    | bindStmt | mixinStmt)
                    / simpleStmt
stmt ::= (IND '__{>}__' complexOrSimpleStmt '__^+__' (IND '__{=}__' / ';') DED)
     / simpleStmt '__^+__' ';'



